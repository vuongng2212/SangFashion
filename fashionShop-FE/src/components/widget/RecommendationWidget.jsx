import { useState, useEffect } from "react";
import axios from "axios";
import { GoogleGenerativeAI } from "@google/generative-ai"; // ‚úÖ Import SDK Gemini
import styled from "styled-components";

const WidgetContainer = styled.div`
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 300px;
  background: white;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
  border-radius: 10px;
  overflow: hidden;
  transition: transform 0.3s ease-in-out;
  transform: ${({ open }) => (open ? "translateY(0)" : "translateY(10px)")};
  opacity: ${({ open }) => (open ? "1" : "0.5")};
`;

const WidgetHeader = styled.div`
  background: #ff6b6b;
  color: white;
  padding: 10px;
  display: flex;
  justify-content: space-between;
  cursor: pointer;
`;

const ChatContainer = styled.div`
  padding: 10px;
  max-height: 250px;
  overflow-y: auto;
`;

const InputBox = styled.input`
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 5px;
  margin-top: 10px;
`;

const WidgetButton = styled.button`
  background: #ff6b6b;
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 5px;
  cursor: pointer;
  width: 100%;
`;

const RecommendationWidget = () => {
  const [open, setOpen] = useState(true);
  const [allProducts, setAllProducts] = useState([]);
  const [chatMessages, setChatMessages] = useState([]);
  const [userInput, setUserInput] = useState("");
  const [loading, setLoading] = useState(false);

  const genAI = new GoogleGenerativeAI(
    "AIzaSyA1q4fs4J78zL62FdxSrQE3h-JbRRG2b68"
  );

  useEffect(() => {
    const fetchAllProducts = async () => {
      try {
        setLoading(true);
        const response = await axios.get(
          "http://localhost:8080/api/v1/products/getAllProducts"
        );
        setAllProducts(response.data);
        console.log(response.data);
      } catch (error) {
        console.error("Error fetching products:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchAllProducts();
  }, []);

  const handleUserMessage = async () => {
    if (!userInput.trim()) return;

    const newMessages = [...chatMessages, { role: "user", text: userInput }];
    setChatMessages(newMessages);

    try {
      setLoading(true);

      // ‚úÖ Truy·ªÅn d·ªØ li·ªáu s·∫£n ph·∫©m v√†o model Gemini
      const productData = allProducts
        .map(
          (product) =>
            `T√™n: ${product.name}, Gi√°: ${product.price}, Lo·∫°i: ${product.category}`
        )
        .join("\n");

      const model = genAI.getGenerativeModel({
        model: "models/gemini-1.5-pro-002",
      });

      const result = await model.generateContent(
        `B·∫°n l√† tr·ª£ l√Ω AI gi√∫p kh√°ch h√†ng t√¨m ki·∫øm s·∫£n ph·∫©m trong c·ª≠a h√†ng. Gi√∫p t√¥i tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng v·ªõi c√°ch tr√¨nh b√†y g·ªçn g√†ng, d·ªÖ hi·ªÉu. ƒê·ªÅ xu·∫•t th√¥ng tin v·ªõi c√°c c√¢u h·ªèi v·ªÅ c√¢ng n·∫∑ng, chi·ªÅu cao c·ªßa kh√°ch h√†ng. N·∫øu b·∫°n c√≥ ph·∫£n h·ªìi kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m, h√£y tr·∫£ l·ªùi l√† "Xin l·ªói! C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn s·∫£n ph·∫©m". N·∫øu t√¨m th·∫•y s·∫£n ph·∫©m, h√£y tr·∫£ v·ªÅ theo ƒë√∫ng ƒë·ªãnh d·∫°ng sau:
        T√™n s·∫£n ph·∫©m: <t√™n s·∫£n ph·∫©m>
        Gi√°: <gi√° s·∫£n ph·∫©m>
        ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m hi·ªán c√≥:\n${productData}\n
        D·ª±a tr√™n d·ªØ li·ªáu tr√™n, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng:\n"${userInput}"`
      );

      const botResponse = result.response.text();
      setChatMessages([...newMessages, { role: "bot", text: botResponse }]);
    } catch (error) {
      console.error("L·ªói AI:", error);
    } finally {
      setLoading(false);
      setUserInput("");
    }
  };

  return (
    <WidgetContainer open={open}>
      <WidgetHeader onClick={() => setOpen(!open)}>
        <span>üõí Chat AI G·ª£i √ù S·∫£n Ph·∫©m</span>
        <span>{open ? "‚ñº" : "‚ñ≤"}</span>
      </WidgetHeader>
      {open && (
        <ChatContainer>
          {chatMessages.map((msg, index) => (
            <p
              key={index}
              style={{ color: msg.role === "user" ? "blue" : "black" }}
            >
              {msg.role === "user" ? "B·∫°n: " : "AI: "}
              {msg.text}
            </p>
          ))}
          {loading && <p>ƒêang t√¨m s·∫£n ph·∫©m...</p>}
          <InputBox
            type="text"
            placeholder="H·ªèi v·ªÅ s·∫£n ph·∫©m..."
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleUserMessage()}
          />
          <WidgetButton onClick={handleUserMessage}>G·ª≠i</WidgetButton>
        </ChatContainer>
      )}
    </WidgetContainer>
  );
};

export default RecommendationWidget;
